{"ast":null,"code":"const {\n  SerialPort\n} = require(\"serialport\");\nconst WebSocket = require(\"ws\");\nconst port = new SerialPort({\n  path: \"COM7\",\n  // Replace with the correct COM port\n  baudRate: 9600\n});\nconst wss = new WebSocket.Server({\n  port: 8080\n});\nconsole.log(\"WebSocket server running at ws://localhost:8080\");\nlet buffer = \"\"; // To store partial data\n\nport.on(\"data\", data => {\n  buffer += data.toString(); // Append incoming data to the buffer\n\n  // Check if the buffer contains a complete JSON object\n  if (buffer.includes(\"}\")) {\n    const jsonStrings = buffer.split(\"}\"); // Split by the closing brace\n    buffer = jsonStrings.pop(); // Save any remaining data to the buffer\n\n    jsonStrings.forEach(jsonString => {\n      jsonString = jsonString.trim() + \"}\"; // Re-add the closing brace\n      try {\n        const parsedData = JSON.parse(jsonString); // Parse the JSON\n        console.log(\"Parsed Data from Arduino:\", parsedData);\n\n        // Send parsed data to WebSocket clients\n        wss.clients.forEach(client => {\n          if (client.readyState === WebSocket.OPEN) {\n            client.send(JSON.stringify(parsedData));\n          }\n        });\n      } catch (err) {\n        console.error(\"Error parsing JSON:\", err.message);\n      }\n    });\n  }\n});\nport.on(\"error\", err => {\n  console.error(\"Serial Port Error:\", err.message);\n});","map":{"version":3,"names":["SerialPort","require","WebSocket","port","path","baudRate","wss","Server","console","log","buffer","on","data","toString","includes","jsonStrings","split","pop","forEach","jsonString","trim","parsedData","JSON","parse","clients","client","readyState","OPEN","send","stringify","err","error","message"],"sources":["C:/Users/vkohl/OneDrive/Documents/Development/Web/Code/FullStack Projects/Smart-Flame-Sensor-master/website/src/App.js"],"sourcesContent":["const { SerialPort } = require(\"serialport\");\nconst WebSocket = require(\"ws\");\n\nconst port = new SerialPort({\n  path: \"COM7\", // Replace with the correct COM port\n  baudRate: 9600,\n});\n\nconst wss = new WebSocket.Server({ port: 8080 });\nconsole.log(\"WebSocket server running at ws://localhost:8080\");\n\nlet buffer = \"\"; // To store partial data\n\nport.on(\"data\", (data) => {\n  buffer += data.toString(); // Append incoming data to the buffer\n\n  // Check if the buffer contains a complete JSON object\n  if (buffer.includes(\"}\")) {\n    const jsonStrings = buffer.split(\"}\"); // Split by the closing brace\n    buffer = jsonStrings.pop(); // Save any remaining data to the buffer\n\n    jsonStrings.forEach((jsonString) => {\n      jsonString = jsonString.trim() + \"}\"; // Re-add the closing brace\n      try {\n        const parsedData = JSON.parse(jsonString); // Parse the JSON\n        console.log(\"Parsed Data from Arduino:\", parsedData);\n\n        // Send parsed data to WebSocket clients\n        wss.clients.forEach((client) => {\n          if (client.readyState === WebSocket.OPEN) {\n            client.send(JSON.stringify(parsedData));\n          }\n        });\n      } catch (err) {\n        console.error(\"Error parsing JSON:\", err.message);\n      }\n    });\n  }\n});\n\nport.on(\"error\", (err) => {\n  console.error(\"Serial Port Error:\", err.message);\n});\n"],"mappings":"AAAA,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC5C,MAAMC,SAAS,GAAGD,OAAO,CAAC,IAAI,CAAC;AAE/B,MAAME,IAAI,GAAG,IAAIH,UAAU,CAAC;EAC1BI,IAAI,EAAE,MAAM;EAAE;EACdC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAEF,MAAMC,GAAG,GAAG,IAAIJ,SAAS,CAACK,MAAM,CAAC;EAAEJ,IAAI,EAAE;AAAK,CAAC,CAAC;AAChDK,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;AAE9D,IAAIC,MAAM,GAAG,EAAE,CAAC,CAAC;;AAEjBP,IAAI,CAACQ,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;EACxBF,MAAM,IAAIE,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE3B;EACA,IAAIH,MAAM,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAE;IACxB,MAAMC,WAAW,GAAGL,MAAM,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACvCN,MAAM,GAAGK,WAAW,CAACE,GAAG,CAAC,CAAC,CAAC,CAAC;;IAE5BF,WAAW,CAACG,OAAO,CAAEC,UAAU,IAAK;MAClCA,UAAU,GAAGA,UAAU,CAACC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;MACtC,IAAI;QACF,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC,CAAC;QAC3CX,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEY,UAAU,CAAC;;QAEpD;QACAf,GAAG,CAACkB,OAAO,CAACN,OAAO,CAAEO,MAAM,IAAK;UAC9B,IAAIA,MAAM,CAACC,UAAU,KAAKxB,SAAS,CAACyB,IAAI,EAAE;YACxCF,MAAM,CAACG,IAAI,CAACN,IAAI,CAACO,SAAS,CAACR,UAAU,CAAC,CAAC;UACzC;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZtB,OAAO,CAACuB,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAACE,OAAO,CAAC;MACnD;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF7B,IAAI,CAACQ,EAAE,CAAC,OAAO,EAAGmB,GAAG,IAAK;EACxBtB,OAAO,CAACuB,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAACE,OAAO,CAAC;AAClD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}